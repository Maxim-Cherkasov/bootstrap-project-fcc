// Custom.scss
// Option B: Include parts of Bootstrap

// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import "../node_modules/bootstrap/scss/functions";

// 2. Include any default variable overrides here
$primary: #0074d9;
$danger: #ff4136;

// 3. Include remainder of required Bootstrap stylesheets
@import "../node_modules/bootstrap/scss/variables";

// 4. Include any default map overrides here

// 5. Include remainder of required parts
@import "../node_modules/bootstrap/scss/maps";
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/root";

// 6. Optionally include any other parts as needed
@import "../node_modules/bootstrap/scss/utilities";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/helpers";

// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import "../node_modules/bootstrap/scss/utilities/api";

// 8. Add additional custom code here

// Create your own map
$custom-colors: (
  "custom-color": #900,
);

// Merge the maps
$theme-colors: map-merge($theme-colors, $custom-colors);

.navbar {
  background-color: $cyan-100;
}

// You can lighten or darken colors with Bootstrap’s tint-color() and shade-color() functions. These functions will mix colors with black or white, unlike Sass’ native lighten() and darken() functions which will change the lightness by a fixed amount, which often doesn’t lead to the desired effect.

// Good example with red color

// Tint a color: mix a color with white
// осветляем или меняем оттенки
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Shade a color: mix a color with black
// Притемняем или меняем оттенки
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if(
    $weight > 0,
    shade-color($color, $weight),
    tint-color($color, -$weight)
  );
}

// In practice, you’d call the function and pass in the color and weight parameters.

// For example, to generate color swatches from our $theme-colors map:

@each $color, $value in $theme-colors {
  .swatch-#{$color} {
    color: color-contrast($value);
  }
}

// It can also be used for one-off contrast needs:

.navbar {
  background-color: color-contrast(#000); // returns `color: #fff`
}

// You can also specify a base color with our color map functions:

.custom-element {
  color: color-contrast($dark); // returns `color: #fff`
}

/*
.navbar {
  background-color: tint-color($indigo, 30%);
}
*/
.custom-element-2 {
  color: shade-color($danger, 30%);
}
